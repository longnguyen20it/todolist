{"ast":null,"code":"var provider = {\n  provinces: [\"Ontario\", \"Quebec\", \"Nova Scotia\", \"New Brunswich\", \"Manitoba\", \"British Columbia\", \"Prince Edward Island\", \"Saskatchewan\", \"Alberta\", \"Newfoundland and Labrador\", \"Northwest Territories\", \"Yukon\", \"Nunavut\"],\n  province_abbr: [\"ON\", \"QC\", \"NS\", \"NB\", \"MB\", \"BC\", \"PE\", \"SK\", \"AB\", \"NL\", \"NT\", \"YT\", \"NU\"],\n  postal_code_format: [\"X#X-#X#\", 'X#X#X#', 'X#X #X#'],\n  capital_cities: [\"Toronto\", \"Quebec City\", \"Halifax\", \"Fredericton\", \"Winnipeg\", \"Victoria\", \"Charlottetown\", \"Regina\", \"Edmonton\", \"St. John's\", \"Yellowknife\", \"Whitehorse\", \"Iqaluit\"],\n  province: function () {\n    return this.random_element(this.provinces);\n  },\n  province_abbr: function () {\n    return this.random_element(this.province_abbr);\n  },\n  //this isn't guaranteed to produce actually valid postal codes, as most letters unused in postal codes\n  postal_code: function () {\n    return this.numerify(this.letterify(this.random_element(this.postal_code_format))).toUpperCase();\n  },\n  //pass a province to this function to return it's capital city\n  capital_city: function (prov) {\n    if (prov) {\n      var idx = this.provinces.indexOf(prov);\n      if (idx === -1) throw new Error('province not found');\n      return this.capital_cities[idx];\n    }\n\n    return this.random_element(this.capital_cities);\n  }\n};\nmodule.exports = provider;","map":{"version":3,"sources":["D:/CD18TT7/React/todolist/node_modules/casual/src/providers/en_CA/address.js"],"names":["provider","provinces","province_abbr","postal_code_format","capital_cities","province","random_element","postal_code","numerify","letterify","toUpperCase","capital_city","prov","idx","indexOf","Error","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAG;AACdC,EAAAA,SAAS,EAAE,CAAC,SAAD,EAAW,QAAX,EAAoB,aAApB,EAAkC,eAAlC,EAAkD,UAAlD,EAA6D,kBAA7D,EAAgF,sBAAhF,EAAuG,cAAvG,EAAsH,SAAtH,EAAgI,2BAAhI,EAA4J,uBAA5J,EAAoL,OAApL,EAA4L,SAA5L,CADG;AAEdC,EAAAA,aAAa,EAAE,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,EAA8C,IAA9C,EAAmD,IAAnD,EAAwD,IAAxD,EAA6D,IAA7D,CAFD;AAGdC,EAAAA,kBAAkB,EAAE,CAAC,SAAD,EAAW,QAAX,EAAqB,SAArB,CAHN;AAIdC,EAAAA,cAAc,EAAE,CAAC,SAAD,EAAW,aAAX,EAAyB,SAAzB,EAAmC,aAAnC,EAAiD,UAAjD,EAA4D,UAA5D,EAAuE,eAAvE,EAAuF,QAAvF,EAAgG,UAAhG,EAA2G,YAA3G,EAAwH,aAAxH,EAAsI,YAAtI,EAAmJ,SAAnJ,CAJF;AAMdC,EAAAA,QAAQ,EAAE,YAAW;AACpB,WAAO,KAAKC,cAAL,CAAoB,KAAKL,SAAzB,CAAP;AACA,GARa;AAUdC,EAAAA,aAAa,EAAE,YAAW;AACzB,WAAO,KAAKI,cAAL,CAAoB,KAAKJ,aAAzB,CAAP;AACA,GAZa;AAcd;AACAK,EAAAA,WAAW,EAAE,YAAW;AACvB,WAAO,KAAKC,QAAL,CAAc,KAAKC,SAAL,CAAe,KAAKH,cAAL,CAAoB,KAAKH,kBAAzB,CAAf,CAAd,EAA4EO,WAA5E,EAAP;AACA,GAjBa;AAkBd;AACAC,EAAAA,YAAY,EAAE,UAASC,IAAT,EAAe;AAC5B,QAAGA,IAAH,EAAS;AACR,UAAIC,GAAG,GAAG,KAAKZ,SAAL,CAAea,OAAf,CAAuBF,IAAvB,CAAV;AACA,UAAGC,GAAG,KAAK,CAAC,CAAZ,EAAe,MAAM,IAAIE,KAAJ,CAAU,oBAAV,CAAN;AACf,aAAO,KAAKX,cAAL,CAAoBS,GAApB,CAAP;AACA;;AACD,WAAO,KAAKP,cAAL,CAAoB,KAAKF,cAAzB,CAAP;AACA;AA1Ba,CAAf;AA8BAY,MAAM,CAACC,OAAP,GAAiBjB,QAAjB","sourcesContent":["var provider = {\n\tprovinces: [\"Ontario\",\"Quebec\",\"Nova Scotia\",\"New Brunswich\",\"Manitoba\",\"British Columbia\",\"Prince Edward Island\",\"Saskatchewan\",\"Alberta\",\"Newfoundland and Labrador\",\"Northwest Territories\",\"Yukon\",\"Nunavut\"],\n\tprovince_abbr: [\"ON\",\"QC\",\"NS\",\"NB\",\"MB\",\"BC\",\"PE\",\"SK\",\"AB\",\"NL\",\"NT\",\"YT\",\"NU\"],\n\tpostal_code_format: [\"X#X-#X#\",'X#X#X#', 'X#X #X#'],\n\tcapital_cities: [\"Toronto\",\"Quebec City\",\"Halifax\",\"Fredericton\",\"Winnipeg\",\"Victoria\",\"Charlottetown\",\"Regina\",\"Edmonton\",\"St. John's\",\"Yellowknife\",\"Whitehorse\",\"Iqaluit\"],\n\n\tprovince: function() {\n\t\treturn this.random_element(this.provinces);\n\t},\n\n\tprovince_abbr: function() {\n\t\treturn this.random_element(this.province_abbr);\n\t},\n\n\t//this isn't guaranteed to produce actually valid postal codes, as most letters unused in postal codes\n\tpostal_code: function() {\n\t\treturn this.numerify(this.letterify(this.random_element(this.postal_code_format))).toUpperCase();\n\t},\n\t//pass a province to this function to return it's capital city\n\tcapital_city: function(prov) {\n\t\tif(prov) {\n\t\t\tvar idx = this.provinces.indexOf(prov);\n\t\t\tif(idx === -1) throw new Error('province not found');\n\t\t\treturn this.capital_cities[idx];\n\t\t}\n\t\treturn this.random_element(this.capital_cities);\n\t}\n\n};\n\nmodule.exports = provider;"]},"metadata":{},"sourceType":"script"}